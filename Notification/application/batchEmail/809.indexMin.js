"use strict";exports.id=809,exports.ids=[809],exports.modules={5809:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  fromSSO: () => (/* reexport */ fromSSO)\n});\n\n// UNUSED EXPORTS: isSsoProfile, validateSsoProfile\n\n// EXTERNAL MODULE: ../../node_modules/@smithy/property-provider/dist-es/index.js + 6 modules\nvar dist_es = __webpack_require__(3631);\n// EXTERNAL MODULE: ../../node_modules/@smithy/shared-ini-file-loader/dist-es/index.js + 15 modules\nvar shared_ini_file_loader_dist_es = __webpack_require__(7073);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js\nconst isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === "string" ||\n        typeof arg.sso_account_id === "string" ||\n        typeof arg.sso_session === "string" ||\n        typeof arg.sso_region === "string" ||\n        typeof arg.sso_role_name === "string");\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/token-providers/dist-es/constants.js\nconst EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nconst REFRESH_MESSAGE = `To refresh this SSO session run \'aws sso login\' with the corresponding profile.`;\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js\nconst ssoOidcClientsHash = {};\nconst getSsoOidcClient = async (ssoRegion) => {\n    const { SSOOIDCClient } = await __webpack_require__.e(/* import() */ 67).then(__webpack_require__.bind(__webpack_require__, 2067));\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js\n\nconst getNewSsoOidcToken = async (ssoToken, ssoRegion) => {\n    const { CreateTokenCommand } = await __webpack_require__.e(/* import() */ 67).then(__webpack_require__.bind(__webpack_require__, 2067));\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: "refresh_token",\n    }));\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js\n\n\nconst validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new dist_es/* TokenProviderError */.Jh(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js\n\n\nconst validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === "undefined") {\n        throw new dist_es/* TokenProviderError */.Jh(`Value not present for \'${key}\' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n\n// EXTERNAL MODULE: external "fs"\nvar external_fs_ = __webpack_require__(9896);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js\n\n\nconst { writeFile } = external_fs_.promises;\nconst writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = (0,shared_ini_file_loader_dist_es/* getSSOTokenFilepath */.C9)(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js\n\n\n\n\n\n\n\nconst lastRefreshAttemptTime = new Date(0);\nconst fromSso = (init = {}) => async () => {\n    init.logger?.debug("@aws-sdk/token-providers", "fromSso");\n    const profiles = await (0,shared_ini_file_loader_dist_es/* parseKnownFiles */.YU)(init);\n    const profileName = (0,shared_ini_file_loader_dist_es/* getProfileName */.Bz)(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new dist_es/* TokenProviderError */.Jh(`Profile \'${profileName}\' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile["sso_session"]) {\n        throw new dist_es/* TokenProviderError */.Jh(`Profile \'${profileName}\' is missing required property \'sso_session\'.`);\n    }\n    const ssoSessionName = profile["sso_session"];\n    const ssoSessions = await (0,shared_ini_file_loader_dist_es/* loadSsoSessionData */.qw)(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new dist_es/* TokenProviderError */.Jh(`Sso session \'${ssoSessionName}\' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new dist_es/* TokenProviderError */.Jh(`Sso session \'${ssoSessionName}\' is missing required property \'${ssoSessionRequiredKey}\'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession["sso_start_url"];\n    const ssoRegion = ssoSession["sso_region"];\n    let ssoToken;\n    try {\n        ssoToken = await (0,shared_ini_file_loader_dist_es/* getSSOTokenFromFile */.vf)(ssoSessionName);\n    }\n    catch (e) {\n        throw new dist_es/* TokenProviderError */.Jh(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey("accessToken", ssoToken.accessToken);\n    validateTokenKey("expiresAt", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey("clientId", ssoToken.clientId, true);\n    validateTokenKey("clientSecret", ssoToken.clientSecret, true);\n    validateTokenKey("refreshToken", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey("accessToken", newSsoOidcToken.accessToken);\n        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js\n\n\n\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nconst resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, profile, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await fromSso({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new dist_es/* CredentialsProviderError */.C1(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    else {\n        try {\n            token = await (0,shared_ini_file_loader_dist_es/* getSSOTokenFromFile */.vf)(ssoStartUrl);\n        }\n        catch (e) {\n            throw new dist_es/* CredentialsProviderError */.C1(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new dist_es/* CredentialsProviderError */.C1(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await __webpack_require__.e(/* import() */ 853).then(__webpack_require__.bind(__webpack_require__, 1853));\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw dist_es/* CredentialsProviderError */.C1.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope } = {} } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new dist_es/* CredentialsProviderError */.C1("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration), credentialScope };\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js\n\nconst validateSsoProfile = (profile) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new dist_es/* CredentialsProviderError */.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", ` +\n            `"sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);\n    }\n    return profile;\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js\n\n\n\n\n\nconst fromSSO = (init = {}) => async () => {\n    init.logger?.debug("@aws-sdk/credential-provider-sso", "fromSSO");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = (0,shared_ini_file_loader_dist_es/* getProfileName */.Bz)(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await (0,shared_ini_file_loader_dist_es/* parseKnownFiles */.YU)(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new dist_es/* CredentialsProviderError */.C1(`Profile ${profileName} was not found.`);\n        }\n        if (!isSsoProfile(profile)) {\n            throw new dist_es/* CredentialsProviderError */.C1(`Profile ${profileName} is not configured with SSO credentials.`);\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await (0,shared_ini_file_loader_dist_es/* loadSsoSessionData */.qw)(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new dist_es/* CredentialsProviderError */.C1(`Conflicting SSO region` + conflictMsg, false);\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new dist_es/* CredentialsProviderError */.C1(`Conflicting SSO start_url` + conflictMsg, false);\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new dist_es/* CredentialsProviderError */.C1("Incomplete configuration. The fromSSO() argument hash must include " +\n            \'"ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"\');\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5809\n')}};