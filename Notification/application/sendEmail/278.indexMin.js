"use strict";exports.id=278,exports.ids=[278,547],exports.modules={8278:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  DEFAULT_MAX_RETRIES: () => (/* reexport */ DEFAULT_MAX_RETRIES),\n  DEFAULT_TIMEOUT: () => (/* reexport */ DEFAULT_TIMEOUT),\n  ENV_CMDS_AUTH_TOKEN: () => (/* reexport */ ENV_CMDS_AUTH_TOKEN),\n  ENV_CMDS_FULL_URI: () => (/* reexport */ ENV_CMDS_FULL_URI),\n  ENV_CMDS_RELATIVE_URI: () => (/* reexport */ ENV_CMDS_RELATIVE_URI),\n  Endpoint: () => (/* reexport */ Endpoint),\n  fromContainerMetadata: () => (/* reexport */ fromContainerMetadata),\n  fromInstanceMetadata: () => (/* reexport */ fromInstanceMetadata),\n  getInstanceMetadataEndpoint: () => (/* reexport */ getInstanceMetadataEndpoint),\n  httpRequest: () => (/* reexport */ httpRequest),\n  providerConfigFromInit: () => (/* reexport */ providerConfigFromInit)\n});\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js\nvar CredentialsProviderError = __webpack_require__(7822);\n// EXTERNAL MODULE: external "url"\nvar external_url_ = __webpack_require__(7310);\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/property-provider/dist-es/ProviderError.js\nvar ProviderError = __webpack_require__(3422);\n// EXTERNAL MODULE: external "buffer"\nvar external_buffer_ = __webpack_require__(4300);\n// EXTERNAL MODULE: external "http"\nvar external_http_ = __webpack_require__(3685);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js\n\n\n\nfunction httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = (0,external_http_.request)({\n            method: "GET",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, "$1"),\n        });\n        req.on("error", (err) => {\n            reject(Object.assign(new ProviderError/* ProviderError */.k("Unable to connect to instance metadata service"), err));\n            req.destroy();\n        });\n        req.on("timeout", () => {\n            reject(new ProviderError/* ProviderError */.k("TimeoutError from instance metadata service"));\n            req.destroy();\n        });\n        req.on("response", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError/* ProviderError */.k("Error response received from instance metadata service"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on("data", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on("end", () => {\n                resolve(external_buffer_.Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js\nconst isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === "object" &&\n    typeof arg.AccessKeyId === "string" &&\n    typeof arg.SecretAccessKey === "string" &&\n    typeof arg.Token === "string" &&\n    typeof arg.Expiration === "string";\nconst fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n});\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js\nconst DEFAULT_TIMEOUT = 1000;\nconst DEFAULT_MAX_RETRIES = 0;\nconst providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js\nconst retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js\n\n\n\n\n\n\nconst ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";\nconst ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";\nconst ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";\nconst fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m("Invalid response received from instance metadata service.", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = "169.254.170.2";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    "127.0.0.1": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    "http:": true,\n    "https:": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = (0,external_url_.parse)(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError/* CredentialsProviderError */.m("The container metadata credential provider cannot be used unless" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        " variable is set", {\n        tryNextLink: false,\n        logger,\n    });\n};\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/node-config-provider/dist-es/index.js + 6 modules\nvar dist_es = __webpack_require__(2336);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js\n\nclass InstanceMetadataV1FallbackError extends CredentialsProviderError/* CredentialsProviderError */.m {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = "InstanceMetadataV1FallbackError";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/url-parser/dist-es/index.js + 1 modules\nvar url_parser_dist_es = __webpack_require__(9010);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js\nvar Endpoint;\n(function (Endpoint) {\n    Endpoint["IPv4"] = "http://169.254.169.254";\n    Endpoint["IPv6"] = "http://[fd00:ec2::254]";\n})(Endpoint || (Endpoint = {}));\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js\nconst ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";\nconst CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";\nconst ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js\nvar EndpointMode;\n(function (EndpointMode) {\n    EndpointMode["IPv4"] = "IPv4";\n    EndpointMode["IPv6"] = "IPv6";\n})(EndpointMode || (EndpointMode = {}));\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js\n\nconst ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";\nconst CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";\nconst ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js\n\n\n\n\n\n\nconst getInstanceMetadataEndpoint = async () => (0,url_parser_dist_es/* parseUrl */.e)((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => (0,dist_es/* loadConfig */.M)(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await (0,dist_es/* loadConfig */.M)(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return Endpoint.IPv4;\n        case EndpointMode.IPv6:\n            return Endpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js\nconst STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";\nconst getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these " +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js\n\nconst staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn("Credential renew failed: ", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js\n\n\n\n\n\n\n\n\n\nconst IMDS_PATH = "/latest/meta-data/iam/security-credentials/";\nconst IMDS_TOKEN_PATH = "/latest/api/token";\nconst AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";\nconst X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";\nconst fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await (0,dist_es/* loadConfig */.M)({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError/* CredentialsProviderError */.m(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(", ")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: "EC2 Metadata token request returned error",\n                    });\n                }\n                else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: "PUT",\n    headers: {\n        "x-aws-ec2-metadata-token-ttl-seconds": "21600",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m("Invalid response received from instance metadata service.", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/credential-provider-imds/dist-es/index.js\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8278\n')},2336:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  M: () => (/* reexport */ loadConfig)\n});\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/property-provider/dist-es/memoize.js\nvar memoize = __webpack_require__(7127);\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/property-provider/dist-es/chain.js\nvar chain = __webpack_require__(8377);\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js\nvar CredentialsProviderError = __webpack_require__(7822);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/node-config-provider/dist-es/getSelectorName.js\nfunction getSelectorName(functionString) {\n    try {\n        const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));\n        constants.delete("CONFIG");\n        constants.delete("CONFIG_PREFIX_SEPARATOR");\n        constants.delete("ENV");\n        return [...constants].join(", ");\n    }\n    catch (e) {\n        return functionString;\n    }\n}\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js\n\n\nconst fromEnv = (envVarSelector, logger) => async () => {\n    try {\n        const config = envVarSelector(process.env);\n        if (config === undefined) {\n            throw new Error();\n        }\n        return config;\n    }\n    catch (e) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m(e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`, { logger });\n    }\n};\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js + 14 modules\nvar dist_es = __webpack_require__(2254);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js\n\n\n\nconst fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {\n    const profile = (0,dist_es/* getProfileName */.Jl)(init);\n    const { configFile, credentialsFile } = await (0,dist_es/* loadSharedConfigFiles */.Zl)(init);\n    const profileFromCredentials = credentialsFile[profile] || {};\n    const profileFromConfig = configFile[profile] || {};\n    const mergedProfile = preferredFile === "config"\n        ? { ...profileFromCredentials, ...profileFromConfig }\n        : { ...profileFromConfig, ...profileFromCredentials };\n    try {\n        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;\n        const configValue = configSelector(mergedProfile, cfgFile);\n        if (configValue === undefined) {\n            throw new Error();\n        }\n        return configValue;\n    }\n    catch (e) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m(e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`, { logger: init.logger });\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/property-provider/dist-es/fromStatic.js\nconst fromStatic = (staticValue) => () => Promise.resolve(staticValue);\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js\n\nconst isFunction = (func) => typeof func === "function";\nconst fromStatic_fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : fromStatic(defaultValue);\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/node-config-provider/dist-es/configLoader.js\n\n\n\n\nconst loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0,memoize/* memoize */.H)((0,chain/* chain */.t)(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic_fromStatic(defaultValue)));\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/node-config-provider/dist-es/index.js\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMzNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQU87QUFDUDtBQUNBLDRFQUE0RSxHQUFHO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDWHFFO0FBQ2pCO0FBQzdDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3REFBd0IsbUNBQW1DLGVBQWUsNEJBQTRCLEtBQUssUUFBUTtBQUNySTtBQUNBOzs7OztBQ2JxRTtBQUNrQjtBQUNuQztBQUM3QyxpREFBaUQsb0NBQW9DLElBQUk7QUFDaEcsb0JBQW9CLGtDQUFjO0FBQ2xDLFlBQVksOEJBQThCLFFBQVEseUNBQXFCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdEQUF3Qix1REFBdUQsUUFBUSxLQUFLLGVBQWUsNEJBQTRCLEtBQUsscUJBQXFCO0FBQ25MO0FBQ0E7OztBQ3RCTzs7O0FDQXFFO0FBQzVFO0FBQ08sTUFBTSxxQkFBVSxtRkFBbUYsVUFBaUI7OztBQ0ZoRTtBQUN2QjtBQUM0QjtBQUN0QjtBQUNuQyxzQkFBc0Isd0VBQXdFLG9CQUFvQixLQUFLLDBCQUFPLENBQUMsc0JBQUssQ0FBQyxPQUFPLCtCQUErQixxQkFBcUIscUNBQXFDLHFCQUFVOzs7QUNKdk4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbmRleC8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvZ2V0U2VsZWN0b3JOYW1lLmpzPzJmZmEiLCJ3ZWJwYWNrOi8vaW5kZXgvLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZS9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlci9kaXN0LWVzL2Zyb21FbnYuanM/Y2VjMSIsIndlYnBhY2s6Ly9pbmRleC8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvZnJvbVNoYXJlZENvbmZpZ0ZpbGVzLmpzP2U0NWMiLCJ3ZWJwYWNrOi8vaW5kZXgvLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZS9ub2RlX21vZHVsZXMvQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlci9kaXN0LWVzL2Zyb21TdGF0aWMuanM/MWIxMyIsIndlYnBhY2s6Ly9pbmRleC8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvZnJvbVN0YXRpYy5qcz9lYjJkIiwid2VicGFjazovL2luZGV4Ly4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUvbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXIvZGlzdC1lcy9jb25maWdMb2FkZXIuanM/ZWJhMiIsIndlYnBhY2s6Ly9pbmRleC8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvaW5kZXguanM/MDBlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0b3JOYW1lKGZ1bmN0aW9uU3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29uc3RhbnRzID0gbmV3IFNldChBcnJheS5mcm9tKGZ1bmN0aW9uU3RyaW5nLm1hdGNoKC8oW0EtWl9dKXszLH0vZykgPz8gW10pKTtcbiAgICAgICAgY29uc3RhbnRzLmRlbGV0ZShcIkNPTkZJR1wiKTtcbiAgICAgICAgY29uc3RhbnRzLmRlbGV0ZShcIkNPTkZJR19QUkVGSVhfU0VQQVJBVE9SXCIpO1xuICAgICAgICBjb25zdGFudHMuZGVsZXRlKFwiRU5WXCIpO1xuICAgICAgICByZXR1cm4gWy4uLmNvbnN0YW50c10uam9pbihcIiwgXCIpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb25TdHJpbmc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIH0gZnJvbSBcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IGdldFNlbGVjdG9yTmFtZSB9IGZyb20gXCIuL2dldFNlbGVjdG9yTmFtZVwiO1xuZXhwb3J0IGNvbnN0IGZyb21FbnYgPSAoZW52VmFyU2VsZWN0b3IsIGxvZ2dlcikgPT4gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGVudlZhclNlbGVjdG9yKHByb2Nlc3MuZW52KTtcbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKGUubWVzc2FnZSB8fCBgTm90IGZvdW5kIGluIEVOVjogJHtnZXRTZWxlY3Rvck5hbWUoZW52VmFyU2VsZWN0b3IudG9TdHJpbmcoKSl9YCwgeyBsb2dnZXIgfSk7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciB9IGZyb20gXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBnZXRQcm9maWxlTmFtZSwgbG9hZFNoYXJlZENvbmZpZ0ZpbGVzIH0gZnJvbSBcIkBzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlclwiO1xuaW1wb3J0IHsgZ2V0U2VsZWN0b3JOYW1lIH0gZnJvbSBcIi4vZ2V0U2VsZWN0b3JOYW1lXCI7XG5leHBvcnQgY29uc3QgZnJvbVNoYXJlZENvbmZpZ0ZpbGVzID0gKGNvbmZpZ1NlbGVjdG9yLCB7IHByZWZlcnJlZEZpbGUgPSBcImNvbmZpZ1wiLCAuLi5pbml0IH0gPSB7fSkgPT4gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb2ZpbGUgPSBnZXRQcm9maWxlTmFtZShpbml0KTtcbiAgICBjb25zdCB7IGNvbmZpZ0ZpbGUsIGNyZWRlbnRpYWxzRmlsZSB9ID0gYXdhaXQgbG9hZFNoYXJlZENvbmZpZ0ZpbGVzKGluaXQpO1xuICAgIGNvbnN0IHByb2ZpbGVGcm9tQ3JlZGVudGlhbHMgPSBjcmVkZW50aWFsc0ZpbGVbcHJvZmlsZV0gfHwge307XG4gICAgY29uc3QgcHJvZmlsZUZyb21Db25maWcgPSBjb25maWdGaWxlW3Byb2ZpbGVdIHx8IHt9O1xuICAgIGNvbnN0IG1lcmdlZFByb2ZpbGUgPSBwcmVmZXJyZWRGaWxlID09PSBcImNvbmZpZ1wiXG4gICAgICAgID8geyAuLi5wcm9maWxlRnJvbUNyZWRlbnRpYWxzLCAuLi5wcm9maWxlRnJvbUNvbmZpZyB9XG4gICAgICAgIDogeyAuLi5wcm9maWxlRnJvbUNvbmZpZywgLi4ucHJvZmlsZUZyb21DcmVkZW50aWFscyB9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNmZ0ZpbGUgPSBwcmVmZXJyZWRGaWxlID09PSBcImNvbmZpZ1wiID8gY29uZmlnRmlsZSA6IGNyZWRlbnRpYWxzRmlsZTtcbiAgICAgICAgY29uc3QgY29uZmlnVmFsdWUgPSBjb25maWdTZWxlY3RvcihtZXJnZWRQcm9maWxlLCBjZmdGaWxlKTtcbiAgICAgICAgaWYgKGNvbmZpZ1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25maWdWYWx1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihlLm1lc3NhZ2UgfHwgYE5vdCBmb3VuZCBpbiBjb25maWcgZmlsZXMgdy8gcHJvZmlsZSBbJHtwcm9maWxlfV06ICR7Z2V0U2VsZWN0b3JOYW1lKGNvbmZpZ1NlbGVjdG9yLnRvU3RyaW5nKCkpfWAsIHsgbG9nZ2VyOiBpbml0LmxvZ2dlciB9KTtcbiAgICB9XG59O1xuIiwiZXhwb3J0IGNvbnN0IGZyb21TdGF0aWMgPSAoc3RhdGljVmFsdWUpID0+ICgpID0+IFByb21pc2UucmVzb2x2ZShzdGF0aWNWYWx1ZSk7XG4iLCJpbXBvcnQgeyBmcm9tU3RhdGljIGFzIGNvbnZlcnRUb1Byb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIjtcbmNvbnN0IGlzRnVuY3Rpb24gPSAoZnVuYykgPT4gdHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIjtcbmV4cG9ydCBjb25zdCBmcm9tU3RhdGljID0gKGRlZmF1bHRWYWx1ZSkgPT4gaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpID8gYXN5bmMgKCkgPT4gYXdhaXQgZGVmYXVsdFZhbHVlKCkgOiBjb252ZXJ0VG9Qcm92aWRlcihkZWZhdWx0VmFsdWUpO1xuIiwiaW1wb3J0IHsgY2hhaW4sIG1lbW9pemUgfSBmcm9tIFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiO1xuaW1wb3J0IHsgZnJvbUVudiB9IGZyb20gXCIuL2Zyb21FbnZcIjtcbmltcG9ydCB7IGZyb21TaGFyZWRDb25maWdGaWxlcyB9IGZyb20gXCIuL2Zyb21TaGFyZWRDb25maWdGaWxlc1wiO1xuaW1wb3J0IHsgZnJvbVN0YXRpYyB9IGZyb20gXCIuL2Zyb21TdGF0aWNcIjtcbmV4cG9ydCBjb25zdCBsb2FkQ29uZmlnID0gKHsgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yLCBjb25maWdGaWxlU2VsZWN0b3IsIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSB9LCBjb25maWd1cmF0aW9uID0ge30pID0+IG1lbW9pemUoY2hhaW4oZnJvbUVudihlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3IpLCBmcm9tU2hhcmVkQ29uZmlnRmlsZXMoY29uZmlnRmlsZVNlbGVjdG9yLCBjb25maWd1cmF0aW9uKSwgZnJvbVN0YXRpYyhkZWZhdWx0VmFsdWUpKSk7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9jb25maWdMb2FkZXJcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2336\n')},9010:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  e: () => (/* binding */ parseUrl)\n});\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/querystring-parser/dist-es/index.js\nfunction parseQueryString(querystring) {\n    const query = {};\n    querystring = querystring.replace(/^\\?/, "");\n    if (querystring) {\n        for (const pair of querystring.split("&")) {\n            let [key, value = null] = pair.split("=");\n            key = decodeURIComponent(key);\n            if (value) {\n                value = decodeURIComponent(value);\n            }\n            if (!(key in query)) {\n                query[key] = value;\n            }\n            else if (Array.isArray(query[key])) {\n                query[key].push(value);\n            }\n            else {\n                query[key] = [query[key], value];\n            }\n        }\n    }\n    return query;\n}\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@smithy/url-parser/dist-es/index.js\n\nconst parseUrl = (url) => {\n    if (typeof url === "string") {\n        return parseUrl(new URL(url));\n    }\n    const { hostname, pathname, port, protocol, search } = url;\n    let query;\n    if (search) {\n        query = parseQueryString(search);\n    }\n    return {\n        hostname,\n        port: port ? parseInt(port) : undefined,\n        protocol,\n        path: pathname,\n        query,\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAxMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdEI4RDtBQUN2RDtBQUNQO0FBQ0E7QUFDQTtBQUNBLFlBQVksNkNBQTZDO0FBQ3pEO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2luZGV4Ly4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUvbm9kZV9tb2R1bGVzL0BzbWl0aHkvcXVlcnlzdHJpbmctcGFyc2VyL2Rpc3QtZXMvaW5kZXguanM/MWY1ZiIsIndlYnBhY2s6Ly9pbmRleC8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlL25vZGVfbW9kdWxlcy9Ac21pdGh5L3VybC1wYXJzZXIvZGlzdC1lcy9pbmRleC5qcz8wOTI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5c3RyaW5nKSB7XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBxdWVyeXN0cmluZyA9IHF1ZXJ5c3RyaW5nLnJlcGxhY2UoL15cXD8vLCBcIlwiKTtcbiAgICBpZiAocXVlcnlzdHJpbmcpIHtcbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHF1ZXJ5c3RyaW5nLnNwbGl0KFwiJlwiKSkge1xuICAgICAgICAgICAgbGV0IFtrZXksIHZhbHVlID0gbnVsbF0gPSBwYWlyLnNwbGl0KFwiPVwiKTtcbiAgICAgICAgICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIHF1ZXJ5KSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocXVlcnlba2V5XSkpIHtcbiAgICAgICAgICAgICAgICBxdWVyeVtrZXldLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSA9IFtxdWVyeVtrZXldLCB2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5O1xufVxuIiwiaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZyB9IGZyb20gXCJAc21pdGh5L3F1ZXJ5c3RyaW5nLXBhcnNlclwiO1xuZXhwb3J0IGNvbnN0IHBhcnNlVXJsID0gKHVybCkgPT4ge1xuICAgIGlmICh0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVVybChuZXcgVVJMKHVybCkpO1xuICAgIH1cbiAgICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSwgcG9ydCwgcHJvdG9jb2wsIHNlYXJjaCB9ID0gdXJsO1xuICAgIGxldCBxdWVyeTtcbiAgICBpZiAoc2VhcmNoKSB7XG4gICAgICAgIHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhzZWFyY2gpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgcG9ydDogcG9ydCA/IHBhcnNlSW50KHBvcnQpIDogdW5kZWZpbmVkLFxuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgcGF0aDogcGF0aG5hbWUsXG4gICAgICAgIHF1ZXJ5LFxuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9010\n')}};