"use strict";exports.id=22,exports.ids=[22],exports.modules={7022:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  ENV_CMDS_FULL_URI: () => (/* reexport */ ENV_CMDS_FULL_URI),\n  ENV_CMDS_RELATIVE_URI: () => (/* reexport */ ENV_CMDS_RELATIVE_URI),\n  fromContainerMetadata: () => (/* reexport */ fromContainerMetadata),\n  fromInstanceMetadata: () => (/* reexport */ fromInstanceMetadata),\n  getInstanceMetadataEndpoint: () => (/* reexport */ getInstanceMetadataEndpoint),\n  httpRequest: () => (/* reexport */ httpRequest)\n});\n\n// UNUSED EXPORTS: DEFAULT_MAX_RETRIES, DEFAULT_TIMEOUT, ENV_CMDS_AUTH_TOKEN, Endpoint, providerConfigFromInit\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js\nvar CredentialsProviderError = __webpack_require__(7124);\n// EXTERNAL MODULE: external "url"\nvar external_url_ = __webpack_require__(7310);\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/property-provider/dist-es/ProviderError.js\nvar ProviderError = __webpack_require__(3282);\n// EXTERNAL MODULE: external "buffer"\nvar external_buffer_ = __webpack_require__(4300);\n// EXTERNAL MODULE: external "http"\nvar external_http_ = __webpack_require__(3685);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js\n\n\n\nfunction httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = (0,external_http_.request)({\n            method: "GET",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, "$1"),\n        });\n        req.on("error", (err) => {\n            reject(Object.assign(new ProviderError/* ProviderError */.k("Unable to connect to instance metadata service"), err));\n            req.destroy();\n        });\n        req.on("timeout", () => {\n            reject(new ProviderError/* ProviderError */.k("TimeoutError from instance metadata service"));\n            req.destroy();\n        });\n        req.on("response", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError/* ProviderError */.k("Error response received from instance metadata service"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on("data", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on("end", () => {\n                resolve(external_buffer_.Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js\nconst isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === "object" &&\n    typeof arg.AccessKeyId === "string" &&\n    typeof arg.SecretAccessKey === "string" &&\n    typeof arg.Token === "string" &&\n    typeof arg.Expiration === "string";\nconst fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n    ...(creds.AccountId && { accountId: creds.AccountId }),\n});\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js\nconst DEFAULT_TIMEOUT = 1000;\nconst DEFAULT_MAX_RETRIES = 0;\nconst providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js\nconst retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js\n\n\n\n\n\n\nconst ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";\nconst ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";\nconst ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";\nconst fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m("Invalid response received from instance metadata service.", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = "169.254.170.2";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    "127.0.0.1": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    "http:": true,\n    "https:": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = (0,external_url_.parse)(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError/* CredentialsProviderError */.m("The container metadata credential provider cannot be used unless" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        " variable is set", {\n        tryNextLink: false,\n        logger,\n    });\n};\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/node-config-provider/dist-es/index.js + 6 modules\nvar dist_es = __webpack_require__(5405);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js\n\nclass InstanceMetadataV1FallbackError extends CredentialsProviderError/* CredentialsProviderError */.m {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = "InstanceMetadataV1FallbackError";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/url-parser/dist-es/index.js + 1 modules\nvar url_parser_dist_es = __webpack_require__(3838);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js\nvar Endpoint;\n(function (Endpoint) {\n    Endpoint["IPv4"] = "http://169.254.169.254";\n    Endpoint["IPv6"] = "http://[fd00:ec2::254]";\n})(Endpoint || (Endpoint = {}));\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js\nconst ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";\nconst CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";\nconst ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js\nvar EndpointMode;\n(function (EndpointMode) {\n    EndpointMode["IPv4"] = "IPv4";\n    EndpointMode["IPv6"] = "IPv6";\n})(EndpointMode || (EndpointMode = {}));\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js\n\nconst ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";\nconst CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";\nconst ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js\n\n\n\n\n\n\nconst getInstanceMetadataEndpoint = async () => (0,url_parser_dist_es/* parseUrl */.e)((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => (0,dist_es/* loadConfig */.M)(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await (0,dist_es/* loadConfig */.M)(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return Endpoint.IPv4;\n        case EndpointMode.IPv6:\n            return Endpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js\nconst STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";\nconst getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these " +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js\n\nconst staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn("Credential renew failed: ", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js\n\n\n\n\n\n\n\n\n\nconst IMDS_PATH = "/latest/meta-data/iam/security-credentials/";\nconst IMDS_TOKEN_PATH = "/latest/api/token";\nconst AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";\nconst X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";\nconst fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await (0,dist_es/* loadConfig */.M)({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError/* CredentialsProviderError */.m(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(", ")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: "EC2 Metadata token request returned error",\n                    });\n                }\n                else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: "PUT",\n    headers: {\n        "x-aws-ec2-metadata-token-ttl-seconds": "21600",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m("Invalid response received from instance metadata service.", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-sts/node_modules/@smithy/credential-provider-imds/dist-es/index.js\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7022\n')}};