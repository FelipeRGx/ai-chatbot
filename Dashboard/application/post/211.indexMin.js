"use strict";exports.id=211,exports.ids=[211],exports.modules={3211:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  fromSSO: () => (/* reexport */ fromSSO)\n});\n\n// UNUSED EXPORTS: isSsoProfile, validateSsoProfile\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js\nvar CredentialsProviderError = __webpack_require__(2834);\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js + 14 modules\nvar dist_es = __webpack_require__(7380);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js\nconst isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === "string" ||\n        typeof arg.sso_account_id === "string" ||\n        typeof arg.sso_session === "string" ||\n        typeof arg.sso_region === "string" ||\n        typeof arg.sso_role_name === "string");\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@smithy/property-provider/dist-es/ProviderError.js\nvar ProviderError = __webpack_require__(2936);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@smithy/property-provider/dist-es/TokenProviderError.js\n\nclass TokenProviderError extends ProviderError/* ProviderError */.k {\n    constructor(message, options = true) {\n        super(message, options);\n        this.name = "TokenProviderError";\n        Object.setPrototypeOf(this, TokenProviderError.prototype);\n    }\n}\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/constants.js\nconst EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nconst REFRESH_MESSAGE = `To refresh this SSO session run \'aws sso login\' with the corresponding profile.`;\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js\nconst ssoOidcClientsHash = {};\nconst getSsoOidcClient = async (ssoRegion) => {\n    const { SSOOIDCClient } = await __webpack_require__.e(/* import() */ 516).then(__webpack_require__.bind(__webpack_require__, 4516));\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js\n\nconst getNewSsoOidcToken = async (ssoToken, ssoRegion) => {\n    const { CreateTokenCommand } = await __webpack_require__.e(/* import() */ 516).then(__webpack_require__.bind(__webpack_require__, 4516));\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: "refresh_token",\n    }));\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js\n\n\nconst validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js\n\n\nconst validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === "undefined") {\n        throw new TokenProviderError(`Value not present for \'${key}\' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n\n// EXTERNAL MODULE: external "fs"\nvar external_fs_ = __webpack_require__(7147);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js\n\n\nconst { writeFile } = external_fs_.promises;\nconst writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = (0,dist_es/* getSSOTokenFilepath */.Py)(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js\n\n\n\n\n\n\n\nconst lastRefreshAttemptTime = new Date(0);\nconst fromSso = (init = {}) => async () => {\n    init.logger?.debug("@aws-sdk/token-providers - fromSso");\n    const profiles = await (0,dist_es/* parseKnownFiles */.MX)(init);\n    const profileName = (0,dist_es/* getProfileName */.Jl)(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile \'${profileName}\' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile["sso_session"]) {\n        throw new TokenProviderError(`Profile \'${profileName}\' is missing required property \'sso_session\'.`);\n    }\n    const ssoSessionName = profile["sso_session"];\n    const ssoSessions = await (0,dist_es/* loadSsoSessionData */.G)(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session \'${ssoSessionName}\' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session \'${ssoSessionName}\' is missing required property \'${ssoSessionRequiredKey}\'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession["sso_start_url"];\n    const ssoRegion = ssoSession["sso_region"];\n    let ssoToken;\n    try {\n        ssoToken = await (0,dist_es/* getSSOTokenFromFile */.gH)(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey("accessToken", ssoToken.accessToken);\n    validateTokenKey("expiresAt", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey("clientId", ssoToken.clientId, true);\n    validateTokenKey("clientSecret", ssoToken.clientSecret, true);\n    validateTokenKey("refreshToken", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey("accessToken", newSsoOidcToken.accessToken);\n        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js\n\n\n\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nconst resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, profile, logger, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await fromSso({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(e.message, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    else {\n        try {\n            token = await (0,dist_es/* getSSOTokenFromFile */.gH)(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m(`The SSO session associated with this profile has expired. ${refreshMessage}`, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await __webpack_require__.e(/* import() */ 344).then(__webpack_require__.bind(__webpack_require__, 344));\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}, } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m("SSO returns an invalid temporary credential.", {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    return {\n        accessKeyId,\n        secretAccessKey,\n        sessionToken,\n        expiration: new Date(expiration),\n        ...(credentialScope && { credentialScope }),\n        ...(accountId && { accountId }),\n    };\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js\n\nconst validateSsoProfile = (profile, logger) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", ` +\n            `"sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger });\n    }\n    return profile;\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js\n\n\n\n\n\nconst fromSSO = (init = {}) => async () => {\n    init.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = (0,dist_es/* getProfileName */.Jl)(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await (0,dist_es/* parseKnownFiles */.MX)(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(`Profile ${profileName} was not found.`, { logger: init.logger });\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(`Profile ${profileName} is not configured with SSO credentials.`, {\n                logger: init.logger,\n            });\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await (0,dist_es/* loadSsoSessionData */.G)(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError/* CredentialsProviderError */.m(`Conflicting SSO region` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError/* CredentialsProviderError */.m(`Conflicting SSO start_url` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m("Incomplete configuration. The fromSSO() argument hash must include " +\n            \'"ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"\', { tryNextLink: false, logger: init.logger });\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3211\n')}};