"use strict";exports.id=157,exports.ids=[157],exports.modules={4157:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  fromIni: () => (/* reexport */ fromIni)\n});\n\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js + 14 modules\nvar dist_es = __webpack_require__(7380);\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js\nvar CredentialsProviderError = __webpack_require__(2834);\n// EXTERNAL MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@smithy/property-provider/dist-es/chain.js\nvar chain = __webpack_require__(7003);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js\n\nconst resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await __webpack_require__.e(/* import() */ 360).then(__webpack_require__.bind(__webpack_require__, 3360));\n            const { fromContainerMetadata } = await __webpack_require__.e(/* import() */ 296).then(__webpack_require__.bind(__webpack_require__, 4296));\n            logger?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");\n            return (0,chain/* chain */.t)(fromHttp(options ?? {}), fromContainerMetadata(options));\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");\n            const { fromInstanceMetadata } = await __webpack_require__.e(/* import() */ 296).then(__webpack_require__.bind(__webpack_require__, 4296));\n            return fromInstanceMetadata(options);\n        },\n        Environment: async (options) => {\n            logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");\n            const { fromEnv } = await __webpack_require__.e(/* import() */ 490).then(__webpack_require__.bind(__webpack_require__, 6490));\n            return fromEnv(options);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js\n\n\n\n\nconst isAssumeRoleProfile = (arg, { profile = "default", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === "object" &&\n        typeof arg.role_arn === "string" &&\n        ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 &&\n        ["undefined", "string"].indexOf(typeof arg.external_id) > -1 &&\n        ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nconst resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await __webpack_require__.e(/* import() */ 528).then(__webpack_require__.bind(__webpack_require__, 5528));\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: options?.parentClientConfig,\n        }, options.clientPlugins);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError/* CredentialsProviderError */.m(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${(0,dist_es/* getProfileName */.Jl)(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(", "), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, {\n            ...profiles,\n            [source_profile]: {\n                ...profiles[source_profile],\n                role_arn: data.role_arn ?? profiles[source_profile].role_arn,\n            },\n        }, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n        DurationSeconds: parseInt(data.duration_seconds || "3600", 10),\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError/* CredentialsProviderError */.m(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js\nconst isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";\nconst resolveProcessCredentials = async (options, profile) => __webpack_require__.e(/* import() */ 826).then(__webpack_require__.bind(__webpack_require__, 826)).then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})());\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js\nconst resolveSsoCredentials = async (profile, options = {}) => {\n    const { fromSSO } = await __webpack_require__.e(/* import() */ 211).then(__webpack_require__.bind(__webpack_require__, 3211));\n    return fromSSO({\n        profile,\n        logger: options.logger,\n    })();\n};\nconst isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === "string" ||\n        typeof arg.sso_account_id === "string" ||\n        typeof arg.sso_session === "string" ||\n        typeof arg.sso_region === "string" ||\n        typeof arg.sso_role_name === "string");\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js\nconst isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === "object" &&\n    typeof arg.aws_access_key_id === "string" &&\n    typeof arg.aws_secret_access_key === "string" &&\n    ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1 &&\n    ["undefined", "string"].indexOf(typeof arg.aws_account_id) > -1;\nconst resolveStaticCredentials = (profile, options) => {\n    options?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");\n    return Promise.resolve({\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    });\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js\nconst isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === "object" &&\n    typeof arg.web_identity_token_file === "string" &&\n    typeof arg.role_arn === "string" &&\n    ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;\nconst resolveWebIdentityCredentials = async (profile, options) => __webpack_require__.e(/* import() */ 899).then(__webpack_require__.bind(__webpack_require__, 6899)).then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})());\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js\n\n\n\n\n\n\nconst resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, options);\n    }\n    throw new CredentialsProviderError/* CredentialsProviderError */.m(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js\n\n\nconst fromIni = (init = {}) => async () => {\n    init.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");\n    const profiles = await (0,dist_es/* parseKnownFiles */.MX)(init);\n    return resolveProfileData((0,dist_es/* getProfileName */.Jl)(init), profiles, init);\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4157\n')}};