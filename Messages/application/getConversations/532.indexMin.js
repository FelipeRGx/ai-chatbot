"use strict";exports.id=532,exports.ids=[532],exports.modules={9532:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  fromHttp: () => (/* reexport */ fromHttp)\n});\n\n// EXTERNAL MODULE: ../../node_modules/@smithy/node-http-handler/dist-es/index.js + 15 modules\nvar dist_es = __webpack_require__(6118);\n// EXTERNAL MODULE: ../../node_modules/@smithy/property-provider/dist-es/index.js + 6 modules\nvar property_provider_dist_es = __webpack_require__(3631);\n// EXTERNAL MODULE: external "fs/promises"\nvar promises_ = __webpack_require__(1943);\nvar promises_default = /*#__PURE__*/__webpack_require__.n(promises_);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js\n\nconst LOOPBACK_CIDR_IPv4 = "127.0.0.0/8";\nconst LOOPBACK_CIDR_IPv6 = "::1/128";\nconst ECS_CONTAINER_HOST = "169.254.170.2";\nconst EKS_CONTAINER_HOST_IPv4 = "169.254.170.23";\nconst EKS_CONTAINER_HOST_IPv6 = "[fd00:ec2::23]";\nconst checkUrl = (url) => {\n    if (url.protocol === "https:") {\n        return;\n    }\n    if (url.hostname === ECS_CONTAINER_HOST ||\n        url.hostname === EKS_CONTAINER_HOST_IPv4 ||\n        url.hostname === EKS_CONTAINER_HOST_IPv6) {\n        return;\n    }\n    if (url.hostname.includes("[")) {\n        if (url.hostname === "[::1]" || url.hostname === "[0000:0000:0000:0000:0000:0000:0000:0001]") {\n            return;\n        }\n    }\n    else {\n        if (url.hostname === "localhost") {\n            return;\n        }\n        const ipComponents = url.hostname.split(".");\n        const inRange = (component) => {\n            const num = parseInt(component, 10);\n            return 0 <= num && num <= 255;\n        };\n        if (ipComponents[0] === "127" &&\n            inRange(ipComponents[1]) &&\n            inRange(ipComponents[2]) &&\n            inRange(ipComponents[3]) &&\n            ipComponents.length === 4) {\n            return;\n        }\n    }\n    throw new property_provider_dist_es/* CredentialsProviderError */.C1(`URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]`);\n};\n\n// EXTERNAL MODULE: ../../node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules\nvar protocol_http_dist_es = __webpack_require__(7624);\n// EXTERNAL MODULE: ../../node_modules/@smithy/smithy-client/dist-es/index.js + 23 modules\nvar smithy_client_dist_es = __webpack_require__(1802);\n// EXTERNAL MODULE: ../../node_modules/@smithy/util-stream/dist-es/index.js + 4 modules\nvar util_stream_dist_es = __webpack_require__(6649);\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js\n\n\n\n\nfunction createGetRequest(url) {\n    return new protocol_http_dist_es/* HttpRequest */.Kd({\n        protocol: url.protocol,\n        hostname: url.hostname,\n        port: Number(url.port),\n        path: url.pathname,\n        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {\n            acc[k] = v;\n            return acc;\n        }, {}),\n        fragment: url.hash,\n    });\n}\nasync function getCredentials(response) {\n    const contentType = response?.headers["content-type"] ?? response?.headers["Content-Type"] ?? "";\n    if (!contentType.includes("json")) {\n        console.warn("HTTP credential provider response header content-type was not application/json. Observed: " + contentType + ".");\n    }\n    const stream = (0,util_stream_dist_es/* sdkStreamMixin */.c9)(response.body);\n    const str = await stream.transformToString();\n    if (response.statusCode === 200) {\n        const parsed = JSON.parse(str);\n        if (typeof parsed.AccessKeyId !== "string" ||\n            typeof parsed.SecretAccessKey !== "string" ||\n            typeof parsed.Token !== "string" ||\n            typeof parsed.Expiration !== "string") {\n            throw new property_provider_dist_es/* CredentialsProviderError */.C1("HTTP credential provider response not of the required format, an object matching: " +\n                "{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }");\n        }\n        return {\n            accessKeyId: parsed.AccessKeyId,\n            secretAccessKey: parsed.SecretAccessKey,\n            sessionToken: parsed.Token,\n            expiration: (0,smithy_client_dist_es/* parseRfc3339DateTime */.EI)(parsed.Expiration),\n        };\n    }\n    if (response.statusCode >= 400 && response.statusCode < 500) {\n        let parsedBody = {};\n        try {\n            parsedBody = JSON.parse(str);\n        }\n        catch (e) { }\n        throw Object.assign(new property_provider_dist_es/* CredentialsProviderError */.C1(`Server responded with status: ${response.statusCode}`), {\n            Code: parsedBody.Code,\n            Message: parsedBody.Message,\n        });\n    }\n    throw new property_provider_dist_es/* CredentialsProviderError */.C1(`Server responded with status: ${response.statusCode}`);\n}\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js\nconst retryWrapper = (toRetry, maxRetries, delayMs) => {\n    return async () => {\n        for (let i = 0; i < maxRetries; ++i) {\n            try {\n                return await toRetry();\n            }\n            catch (e) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n        }\n        return await toRetry();\n    };\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.js\n\n\n\n\n\n\nconst AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";\nconst DEFAULT_LINK_LOCAL_HOST = "http://169.254.170.2";\nconst AWS_CONTAINER_CREDENTIALS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";\nconst AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = "AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE";\nconst AWS_CONTAINER_AUTHORIZATION_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";\nconst fromHttp = (options) => {\n    options.logger?.debug("@aws-sdk/credential-provider-http", "fromHttp");\n    let host;\n    const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];\n    const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];\n    const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];\n    const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];\n    if (relative && full) {\n        console.warn("AWS SDK HTTP credentials provider:", "you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.");\n        console.warn("awsContainerCredentialsFullUri will take precedence.");\n    }\n    if (token && tokenFile) {\n        console.warn("AWS SDK HTTP credentials provider:", "you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.");\n        console.warn("awsContainerAuthorizationToken will take precedence.");\n    }\n    if (full) {\n        host = full;\n    }\n    else if (relative) {\n        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;\n    }\n    else {\n        throw new property_provider_dist_es/* CredentialsProviderError */.C1(`No HTTP credential provider host provided.\nSet AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`);\n    }\n    const url = new URL(host);\n    checkUrl(url);\n    const requestHandler = new dist_es/* NodeHttpHandler */.$c({\n        requestTimeout: options.timeout ?? 1000,\n        connectionTimeout: options.timeout ?? 1000,\n    });\n    return retryWrapper(async () => {\n        const request = createGetRequest(url);\n        if (token) {\n            request.headers.Authorization = token;\n        }\n        else if (tokenFile) {\n            request.headers.Authorization = (await promises_default().readFile(tokenFile)).toString();\n        }\n        try {\n            const result = await requestHandler.handle(request);\n            return getCredentials(result.response);\n        }\n        catch (e) {\n            throw new property_provider_dist_es/* CredentialsProviderError */.C1(String(e));\n        }\n    }, options.maxRetries ?? 3, options.timeout ?? 1000);\n};\n\n;// CONCATENATED MODULE: ../../node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-http/dist-es/index.js\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9532\n')}};